(module(func $exponent (export "exponent")(param $base_0 i32)(param $exp_1 i32)(result i32)(local $result_2 i32)(if (i32.eq (local.get $exp_1)(i32.const 0))(then(block (return (i32.const 1)))))(if (i32.lt_s (local.get $exp_1)(i32.const 0))(then(block (return (i32.const 0)))))(local.set $result_2 (i32.const 1))(block (result i32)(loop (if (i32.eq (local.get $exp_1)(i32.const 0))(then(block (br 3 (local.get $result_2)))))(local.set $result_2 (i32.mul (local.get $result_2)(local.get $base_0)))(local.set $exp_1 (i32.sub (local.get $exp_1)(i32.const 1)))(br 0))(unreachable)))(func $fibonacci_recursive (export "fibonacci_recursive")(param $n_0 i32)(result i32)(if (i32.le_s (local.get $n_0)(i32.const 1))(then(block (return (local.get $n_0)))))(i32.add (call $fibonacci_recursive (i32.sub (local.get $n_0)(i32.const 1)))(call $fibonacci_recursive (i32.sub (local.get $n_0)(i32.const 2)))))(func $fibonacci_iterative (export "fibonacci_iterative")(param $n_0 i32)(result i32)(local $a_1 i32)(local $b_2 i32)(local $c_3 i32)(if (i32.le_s (local.get $n_0)(i32.const 1))(then(block (return (local.get $n_0)))))(nop)(local.set $b_2 (i32.const 1))(nop)(block (result i32)(loop (if (i32.eq (local.get $n_0)(i32.const 0))(then(block (br 3 (local.get $a_1)))))(if (i32.eq (local.get $n_0)(i32.const 1))(then(block (br 3 (local.get $b_2)))))(local.set $c_3 (i32.add (local.get $a_1)(local.get $b_2)))(local.set $a_1 (local.get $b_2))(local.set $b_2 (local.get $c_3))(local.set $n_0 (i32.sub (local.get $n_0)(i32.const 1)))(br 0))(unreachable))))